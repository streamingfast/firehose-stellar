package decoder

import (
	"testing"

	"github.com/stretchr/testify/require"
	"go.uber.org/zap"
)

func Test_DecodeLedgerMetadata(t *testing.T) {
	decoder := NewDecoder(zap.NewNop())
	ledgerMetadata, err := decoder.DecodeLedgerMetadata("")
	require.NoError(t, err)
	require.NotNil(t, ledgerMetadata)
}

func Test_DecodeTransactionEnvelop(t *testing.T) {
	decoder := NewDecoder(zap.NewNop())
	transactionMetadata, err := decoder.DecodeTransactionEnvelope("AAAAAgAAAADyvToLvJe06EXPqSQgBWS0Rr++8SCKj8AlBdBDyKGwBQAPQkAAAADHAAAAXQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAABB90WssODNIgi6BHveqzxTRmIpvAFRyVNM+Hm2GVuCcAAAAAAAAAABmkq+rlsv67UKM7Q84yVjMbo6QHeQfZqz28PRJN8VcNAAAABdIdugAAAAAAAAAAALIobAFAAAAQNHROVl4rVJucGsenB+iXDjIcTqsh9UIelxGuou+N55kNiFXlj6MQc7eUSjBj3cYXlwVDycLNZlSZTHqh0b+MQ2GVuCcAAAAQH1XAOqFZxkpsTiPPcg2J0A/BI96Wpp+8OBa69Gaxri0xQ4pLdn6x6D5YrhDLY1gLQdBhi3gpf5LLO5XLw0Aawc=")
	require.NoError(t, err)
	require.NotNil(t, transactionMetadata)
}

func Test_DecodeTransactionResult(t *testing.T) {
	decoder := NewDecoder(zap.NewNop())
	transactionMetadata, err := decoder.DecodeTransactionResult("AAAAAAAAAGQAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAA=")
	require.NoError(t, err)
	require.NotNil(t, transactionMetadata)
}

func Test_DecodeTransactionResultMeda(t *testing.T) {
	decoder := NewDecoder(zap.NewNop())
	transactionMetadata, err := decoder.DecodeTransactionResultMeta("AAAAAwAAAAAAAAACAAAAAwAH7NoAAAAAAAAAAPK9Ogu8l7ToRc+pJCAFZLRGv77xIIqPwCUF0EPIobAFAAAAADwzPCwAAADHAAAAXAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAMAAAAAAAfkwgAAAABnf/mpAAAAAAAAAAEAB+zaAAAAAAAAAADyvToLvJe06EXPqSQgBWS0Rr++8SCKj8AlBdBDyKGwBQAAAAA8MzwsAAAAxwAAAF0AAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAADAAAAAAAH7NoAAAAAZ4AiKwAAAAAAAAABAAAAAwAAAAMAB+zYAAAAAAAAAAAQfdFrLDgzSIIugR73qs8U0ZiKbwBUclTTPh5thlbgnAEdLvGEo+lMAAAAlQAAAGQAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAADAAAAAAAAAR4AAAAAZ1h9eQAAAAAAAAABAAfs2gAAAAAAAAAAEH3Rayw4M0iCLoEe96rPFNGYim8AVHJU0z4ebYZW4JwBHS7aPC0BTAAAAJUAAABkAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAEeAAAAAGdYfXkAAAAAAAAAAAAH7NoAAAAAAAAAAGaSr6uWy/rtQoztDzjJWMxujpAd5B9mrPbw9Ek3xVw0AAAAF0h26AAAB+zaAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=")
	require.NoError(t, err)
	require.NotNil(t, transactionMetadata)
}
